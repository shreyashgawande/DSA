Code:
//{ Driver Code Starts
//Initial template for C++

#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
//User function template for C++

class Solution 
{
    public:
    //Function to find if there is a celebrity in the party or not.
    int celebrity(vector<vector<int> >& M, int n) 
    {
        // code here 
        //intialise stack 
        stack<int>s;
        for(int i=0;i<n;i++){
            s.push(i);
        }//push all elements in stack
        
        while(s.size()>1){
            int a = s.top();
            s.pop();
            int b = s.top();
            s.pop();
            
            if(M[a][b]){
                s.push(b);
            }
            else{
                s.push(a);
                
            }
            
        }
        //last element in the stack to be most potential one
        int pCandidate= s.top();
        int zCount =0;
        bool rowCheck = false;
        
        for(int i=0;i<n;i++){
            if(M[pCandidate][i] == 0){
                zCount++;
            }
        }
        if(zCount == n){
            rowCheck = true;
        }
        
        bool colCheck =false;
        int oneCount =0;
        
        for(int i=0;i<n;i++){
            if(M[i][pCandidate] == 1){
                oneCount++;
            }
        }
        if(oneCount == n-1){
            colCheck = true;
        }
        
        if(rowCheck && colCheck){
            return pCandidate;
        }
        else{
            return -1;
        }
    }
};

//{ Driver Code Starts.

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        vector<vector<int> > M( n , vector<int> (n, 0));
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                cin>>M[i][j];
            }
        }
        Solution ob;
        cout<<ob.celebrity(M,n)<<endl;

    }
}

// } Driver Code Ends

Link:
https://practice.geeksforgeeks.org/problems/the-celebrity-problem/1
