Code :
/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include <bits/stdc++.h>

using namespace std;

class node{
    public:
    int data;
    node* left;
    node* right;
    
    node(int d){
        this->data = d;
        this->left = NULL;
        this->right = NULL;
    }
    
};

//1 2 3 -1 -1 4 -1 -1 3 -1 -1 
node* buildTree(node* root){
    cout<<"Enter the data"<<endl;
    int data;
    cin>>data;
    
    if(data==-1){
        return NULL;
    }
    
    root = new node(data);
    cout<<"Enter the left of "<< data <<endl;
    root->left = buildTree(root->left);
    cout<<"Enter the right "<< data <<endl;
    root->right = buildTree(root->right);
    return root;
}
void levelOrder(node* root){
    queue<node*> q ;
    q.push(root);
    q.push(NULL);
    
    while(!q.empty()){
        node* temp = q.front();
       
        q.pop();
        if(temp==NULL){
            cout<<endl;
            if(!q.empty()){
                q.push(NULL);
            }
        }
        else{
             cout<<temp->data<<" ";
            
        
        if(temp->left){
            q.push(temp->left);
        }
        if(temp->right){
            q.push(temp->right);
        }
        }
    }
    
}
void inorder(node* root){
    if(root==NULL){
        return;
    }
    inorder(root->left);
    cout<<root->data<<" ";
    inorder(root->right);
}
void preorder(node* root){
    if(root==NULL){
        return;
    }
    cout<<root->data<<" ";
    preorder(root->left);
    preorder(root->right);
    
}
void postorder(node* root){
    if(root==NULL){
        return;
    }
    postorder(root->left);
    postorder(root->right);
    cout<<root->data<<" ";
}
void buildfromlevel(node* &root){
    queue<node*>q;
    cout<<"Enter the data for root : "<<endl;
    int data;
    cin>>data;
    root = new node(data);
    q.push(root);
    
    while(!q.empty()){
        node* temp = q.front();
        q.pop();
        cout<<"Enter the data for left of : "<<temp->data<<endl;
        int leftdata;
        cin>>leftdata;
        
        if(leftdata!=-1){
           temp->left = new node(leftdata);
           q.push(temp->left);
        }
         cout<<"Enter the data for right of : "<<temp->data<<endl;
        int rightdata;
        cin>>rightdata;
        
        if(rightdata!=-1){
           temp->right = new node(rightdata);
           q.push(temp->right);
        }
         
        
    }
    
}
//1 3 7 -1 -1 11 -1 -1 5 17 -1 -1 -1
int main()
{
    cout<<"Hello World"<<endl;;
    node* root =NULL;
    buildfromlevel(root);
    levelOrder(root);
    
    // root = buildTree(root);
    // levelOrder(root);
    // cout<<"inorder :"<<endl;
    // inorder(root);
    // cout<<"preorder :"<<endl;
    // preorder(root);
    // cout<<"postorder :"<<endl;
    // postorder(root);
    

    return 0;
}

