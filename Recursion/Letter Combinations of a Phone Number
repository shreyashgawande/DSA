Code:
class Solution {
    private:
    void solve(string digits,string curr,vector<string>& ans,int i,string mapping[]){
        if(i>= digits.length()){
            ans.push_back(curr);
            return;

        }
        int val = digits[i]-'0';//getting digits as integer
        string value = mapping[val];//checking string for integer digit ex "abc" for 2
        for(int j=0;j<value.length();j++){
            curr.push_back(value[j]);
            //adding first char
            solve(digits,curr,ans,i+1,mapping);
            //call for remaining chars
            curr.pop_back();
            //making curr null again
        }

    }
public:
    vector<string> letterCombinations(string digits) {
        vector<string>ans;
        int i=0;
        string curr ="";
        string mapping[]={"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
        if(digits.length()==0){
            return ans;

        }
        solve(digits,curr,ans,i,mapping);
        return ans;
    }
};
Link:
https://leetcode.com/problems/letter-combinations-of-a-phone-number/
